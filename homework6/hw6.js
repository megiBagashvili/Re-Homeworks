//task 1
console.log("1");
setTimeout(() => console.log("2"), 100);
setTimeout(() => console.log("3"), 0);
Promise.resolve().then(() => console.log("4"));
console.log("5");
//1,5,4,3,2
/** 
 * ჯერ სრულდება synchronous ბრძანებები, ამიტომ 1 და 5
 * პირველები დაილოგება იმ თანმიმდევრობით, როგორც კოდშ წერია.
 * Promise.then(...) ქოლბექები წარმოადგენენ microtask-ს.
 * microtask-ები ეშვებიან სინქრონული კოდის დასრულების შემდეგ,
 * და ვიდრე ტაიმერების ქოლბექები (macrotask) დაიწყება,
 * ამიტომ 1-სა და 5-ის შემდეგ დაიბეჭდება 4.
 * setTimeout(..., 0) და setTimeout(..., 100) ქოლბექები წარმოადგენენ macrotask-ს,
 * რომლებიც ეშვებიან microtask-ების დასრულების შემდეგ. 
 * setTimeout(..., 0) უფრო ადრე სრულდება ვიდრე setTimeout(..., 100),
 * ამიტომ 3 დაიბეჭდება 4-ის შემდეგ, ხოლო 2 ყველაზე ბოლოს. 
 */